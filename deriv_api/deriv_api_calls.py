# This file was automatically generated by regen-py.pl at 20210923-125757
# applies JSON schema to generate Deriv API

from numbers import Number

# =======================
# ----- API Methods -----
# =======================


class DerivAPICalls:
    # To be implemented by the sub-class
    # __init__() { }

    async def account_closure(self, args=None): 
        """
        param args {Dict}
        param args.account_closure {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.reason {String}: Reason for closing off accounts.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'account_closure': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'reason': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'account_closure',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def account_security(self, args=None): 
        """
        param args {Dict}
        param args.account_security {Number}: Must be `1`
        param args.otp {String}: [Optional] OTP (one-time passcode) generated by a 2FA application like Authy, Google Authenticator or Yubikey.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.totp_action {String}: [Optional] Action to be taken for managing TOTP (time-based one-time password, RFC6238). Generate will create a secret key which is then returned in the secret_key response field, you can then enable by using that code in a 2FA application.
        """

        if args is None:
            args = {} 

        config = {
            'account_security': {
               'required': 1,
               'type': 'numeric'
            },
            'otp': {
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'totp_action': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'account_security',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def account_statistics(self, args=None): 
        """
        param args {Dict}
        param args.account_statistics {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'account_statistics': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'account_statistics',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def active_symbols(self, args=None): 
        """
        param args {Dict}
        param args.active_symbols {String}: If you use `brief`, only a subset of fields will be returned.
        param args.landing_company {String}: [Optional] If you specify this field, only symbols available for trading by that landing company will be returned. If you are logged in, only symbols available for trading by your landing company will be returned regardless of what you specify in this field.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.product_type {String}: [Optional] If you specify this field, only symbols that can be traded through that product type will be returned.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'active_symbols': {
               'required': 1,
               'type': 'string'
            },
            'landing_company': {
               'type': 'string'
            },
            'passthrough': {},
            'product_type': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'active_symbols',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def affiliate_account_add(self, args=None): 
        """
        param args {Dict}
        param args.account_opening_reason {String}: [Optional] Purpose and reason for requesting the account opening.
        param args.account_turnover {String}: [Optional] The anticipated account turnover.
        param args.address_city {String}: [Optional] Within 100 characters.
        param args.address_line_1 {String}: Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-
        param args.address_line_2 {String}: [Optional] Within 70 characters.
        param args.address_postcode {String}: [Optional] Within 20 characters and may not contain '+'.
        param args.address_state {String}: [Optional] Possible value receive from `states_list` call.
        param args.affiliate_account_add {Number}: Must be `1`
        param args.affiliate_plan {String}: The affiliate plan the account will subscribe to
        param args.affiliate_token {String}: [Optional] Affiliate token, within 32 characters.
        param args.citizen {Any}: [Optional] Country of legal citizenship, 2-letter country code.
        param args.client_type {String}: [Optional] Indicates whether this is for a client requesting an account with professional status.
        param args.currency {String}: [Optional] To set currency of the account. List of supported currencies can be acquired with `payout_currencies` call.
        param args.date_of_birth {String}: Date of birth format: `yyyy-mm-dd`.
        param args.first_name {String}: Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.last_name {String}: Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.non_pep_declaration {Number}: [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.phone {Any}: [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.
        param args.place_of_birth {String}: [Optional] Place of birth, 2-letter country code.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.residence {String}: 2-letter country code, possible value receive from `residence_list` call.
        param args.salutation {String}: [Optional] Accept any value in enum list.
        param args.secret_answer {String}: [Optional] Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client open another account.
        param args.secret_question {String}: [Optional] Accept any value in enum list. Required for new account and existing client details will be used if client open another account.
        param args.tax_identification_number {String}: [Optional] Tax identification number. Only applicable for real money account. Required for `maltainvest` landing company.
        param args.tax_residence {String}: [Optional] Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for `maltainvest` landing company.
        """

        if args is None:
            args = {} 

        config = {
            'account_opening_reason': {
               'type': 'string'
            },
            'account_turnover': {
               'type': 'string'
            },
            'address_city': {
               'type': 'string'
            },
            'address_line_1': {
               'type': 'string'
            },
            'address_line_2': {
               'type': 'string'
            },
            'address_postcode': {
               'type': 'string'
            },
            'address_state': {
               'type': 'string'
            },
            'affiliate_account_add': {
               'required': 1,
               'type': 'numeric'
            },
            'affiliate_plan': {
               'type': 'string'
            },
            'affiliate_token': {
               'type': 'string'
            },
            'citizen': {},
            'client_type': {
               'type': 'string'
            },
            'currency': {
               'type': 'string'
            },
            'date_of_birth': {
               'type': 'string'
            },
            'first_name': {
               'type': 'string'
            },
            'last_name': {
               'type': 'string'
            },
            'non_pep_declaration': {
               'type': 'numeric'
            },
            'passthrough': {},
            'phone': {},
            'place_of_birth': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'residence': {
               'type': 'string'
            },
            'salutation': {
               'type': 'string'
            },
            'secret_answer': {
               'type': 'string'
            },
            'secret_question': {
               'type': 'string'
            },
            'tax_identification_number': {
               'type': 'string'
            },
            'tax_residence': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'affiliate_account_add',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def api_token(self, args=None): 
        """
        param args {Dict}
        param args.api_token {Number}: Must be `1`
        param args.delete_token {String}: [Optional] The token to remove.
        param args.new_token {String}: [Optional] The name of the created token.
        param args.new_token_scopes {Any}: [Optional] List of permission scopes to provide with the token.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.valid_for_current_ip_only {Number}: [Optional] If you set this parameter during token creation, then the token created will only work for the IP address that was used to create the token
        """

        if args is None:
            args = {} 

        config = {
            'api_token': {
               'required': 1,
               'type': 'numeric'
            },
            'delete_token': {
               'type': 'string'
            },
            'new_token': {
               'type': 'string'
            },
            'new_token_scopes': {},
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'valid_for_current_ip_only': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'api_token',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def app_delete(self, args=None): 
        """
        param args {Dict}
        param args.app_delete {Number}: Application app_id
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'app_delete': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'app_delete',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def app_get(self, args=None): 
        """
        param args {Dict}
        param args.app_get {Number}: Application app_id
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'app_get': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'app_get',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def app_list(self, args=None): 
        """
        param args {Dict}
        param args.app_list {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'app_list': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'app_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def app_markup_details(self, args=None): 
        """
        param args {Dict}
        param args.app_id {Number}: [Optional] Specific application `app_id` to report on.
        param args.app_markup_details {Number}: Must be `1`
        param args.client_loginid {String}: [Optional] Specific client loginid to report on, like CR12345
        param args.date_from {String}: Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
        param args.date_to {String}: End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
        param args.description {Number}: [Optional] If set to 1, will return `app_markup` transaction details.
        param args.limit {Number}: [Optional] Apply upper limit to count of transactions received.
        param args.offset {Number}: [Optional] Number of transactions to skip.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.sort {String}: [Optional] Sort direction on `transaction_time`. Other fields sort order is ASC.
        param args.sort_fields {Any}: [Optional] One or more of the specified fields to sort on. Default sort field is by `transaction_time`.
        """

        if args is None:
            args = {} 

        config = {
            'app_id': {
               'type': 'numeric'
            },
            'app_markup_details': {
               'required': 1,
               'type': 'numeric'
            },
            'client_loginid': {
               'type': 'string'
            },
            'date_from': {
               'required': 1,
               'type': 'string'
            },
            'date_to': {
               'required': 1,
               'type': 'string'
            },
            'description': {
               'type': 'numeric'
            },
            'limit': {
               'type': 'numeric'
            },
            'offset': {
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'sort': {
               'type': 'string'
            },
            'sort_fields': {}
         }

        all_args = {
            'method': 'app_markup_details',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def app_register(self, args=None): 
        """
        param args {Dict}
        param args.app_markup_percentage {Number}: [Optional] Markup to be added to contract prices (as a percentage of contract payout).
        param args.app_register {Number}: Must be `1`
        param args.appstore {String}: [Optional] Application's App Store URL (if applicable).
        param args.github {String}: [Optional] Application's GitHub page (for open-source projects).
        param args.googleplay {String}: [Optional] Application's Google Play URL (if applicable).
        param args.homepage {String}: [Optional] Application's homepage URL.
        param args.name {String}: Application name.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.redirect_uri {String}: [Optional] The URL to redirect to after a successful login. Required if charging markup percentage
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.scopes {Any}: List of permission scopes to grant the application.
        param args.verification_uri {String}: [Optional] Used when `verify_email` called. If available, a URL containing the verification token will be sent to the client's email, otherwise only the token will be sent.
        """

        if args is None:
            args = {} 

        config = {
            'app_markup_percentage': {
               'type': 'numeric'
            },
            'app_register': {
               'required': 1,
               'type': 'numeric'
            },
            'appstore': {
               'type': 'string'
            },
            'github': {
               'type': 'string'
            },
            'googleplay': {
               'type': 'string'
            },
            'homepage': {
               'type': 'string'
            },
            'name': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'redirect_uri': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'scopes': {
               'required': 1
            },
            'verification_uri': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'app_register',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def app_update(self, args=None): 
        """
        param args {Dict}
        param args.app_markup_percentage {Number}: [Optional] Markup to be added to contract prices (as a percentage of contract payout).
        param args.app_update {Number}: Application app_id.
        param args.appstore {String}: [Optional] Application's App Store URL (if applicable).
        param args.github {String}: [Optional] Application's GitHub page (for open-source projects).
        param args.googleplay {String}: [Optional] Application's Google Play URL (if applicable).
        param args.homepage {String}: [Optional] Application's homepage URL.
        param args.name {String}: Application name.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.redirect_uri {String}: [Optional] The URL to redirect to after a successful login. Required if charging markup percentage.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.scopes {Any}: Change scopes will revoke all user's grants and log them out.
        param args.verification_uri {String}: [Optional] Used when `verify_email` called. If available, a URL containing the verification token will send to the client's email, otherwise only the token will be sent.
        """

        if args is None:
            args = {} 

        config = {
            'app_markup_percentage': {
               'type': 'numeric'
            },
            'app_update': {
               'required': 1,
               'type': 'numeric'
            },
            'appstore': {
               'type': 'string'
            },
            'github': {
               'type': 'string'
            },
            'googleplay': {
               'type': 'string'
            },
            'homepage': {
               'type': 'string'
            },
            'name': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'redirect_uri': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'scopes': {
               'required': 1
            },
            'verification_uri': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'app_update',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def asset_index(self, args=None): 
        """
        param args {Dict}
        param args.asset_index {Number}: Must be `1`
        param args.landing_company {String}: [Optional] If specified, will return only the underlyings for the specified landing company.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'asset_index': {
               'required': 1,
               'type': 'numeric'
            },
            'landing_company': {
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'asset_index',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def authorize(self, args=None): 
        """
        param args {Dict}
        param args.add_to_login_history {Number}: [Optional] Send this when you use api tokens for authorization and want to track activity using `login_history` call.
        param args.authorize {String}: Authentication token. May be retrieved from https://www.binary.com/en/user/security/api_tokenws.html
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'add_to_login_history': {
               'type': 'numeric'
            },
            'authorize': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'authorize',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def balance(self, args=None): 
        """
        param args {Dict}
        param args.account {String}: [Optional] If set to `all`, return the balances of all accounts one by one; if set to `current`, return the balance of current account; if set as an account id, return the balance of that account.
        param args.balance {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever the balance changes.
        """

        if args is None:
            args = {} 

        config = {
            'account': {
               'type': 'string'
            },
            'balance': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'balance',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def buy(self, args=None): 
        """
        param args {Dict}
        param args.buy {String}: Either the ID received from a Price Proposal (`proposal` call), or `1` if contract buy parameters are passed in the `parameters` field.
        param args.parameters {Any}: 
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.price {Number}: Maximum price at which to purchase the contract.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] `1` to stream.
        """

        if args is None:
            args = {} 

        config = {
            'buy': {
               'required': 1,
               'type': 'string'
            },
            'parameters': {
               'amount': {
                  'type': 'numeric'
               },
               'app_markup_percentage': {
                  'type': 'numeric'
               },
               'barrier': {
                  'type': 'string'
               },
               'barrier2': {
                  'type': 'string'
               },
               'basis': {
                  'type': 'string'
               },
               'cancellation': {
                  'type': 'string'
               },
               'contract_type': {
                  'required': 1,
                  'type': 'string'
               },
               'currency': {
                  'required': 1,
                  'type': 'string'
               },
               'date_expiry': {
                  'type': 'numeric'
               },
               'date_start': {
                  'type': 'numeric'
               },
               'duration': {
                  'type': 'numeric'
               },
               'duration_unit': {
                  'type': 'string'
               },
               'limit_order': {
                  'stop_loss': {
                     'type': 'numeric'
                  },
                  'take_profit': {
                     'type': 'numeric'
                  }
               },
               'multiplier': {
                  'type': 'numeric'
               },
               'product_type': {
                  'type': 'string'
               },
               'selected_tick': {
                  'type': 'numeric'
               },
               'symbol': {
                  'required': 1,
                  'type': 'string'
               },
               'trading_period_start': {
                  'type': 'numeric'
               }
            },
            'passthrough': {},
            'price': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'buy',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def buy_contract_for_multiple_accounts(self, args=None): 
        """
        param args {Dict}
        param args.buy_contract_for_multiple_accounts {String}: Either the ID received from a Price Proposal (`proposal` call), or `1` if contract buy parameters are passed in the `parameters` field.
        param args.parameters {Any}: 
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.price {Number}: Maximum price at which to purchase the contract.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.tokens {Any}: List of API tokens identifying the accounts for which the contract is bought. Note: If the same token appears multiple times or if multiple tokens designate the same account, the contract is bought multiple times for this account.
        """

        if args is None:
            args = {} 

        config = {
            'buy_contract_for_multiple_accounts': {
               'required': 1,
               'type': 'string'
            },
            'parameters': {
               'amount': {
                  'type': 'numeric'
               },
               'app_markup_percentage': {
                  'type': 'numeric'
               },
               'barrier': {
                  'type': 'string'
               },
               'barrier2': {
                  'type': 'string'
               },
               'basis': {
                  'type': 'string'
               },
               'contract_type': {
                  'required': 1,
                  'type': 'string'
               },
               'currency': {
                  'required': 1,
                  'type': 'string'
               },
               'date_expiry': {
                  'type': 'numeric'
               },
               'date_start': {
                  'type': 'numeric'
               },
               'duration': {
                  'type': 'numeric'
               },
               'duration_unit': {
                  'type': 'string'
               },
               'multiplier': {
                  'type': 'numeric'
               },
               'selected_tick': {
                  'type': 'numeric'
               },
               'symbol': {
                  'required': 1,
                  'type': 'string'
               }
            },
            'passthrough': {},
            'price': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'tokens': {
               'required': 1
            }
         }

        all_args = {
            'method': 'buy_contract_for_multiple_accounts',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def cancel(self, args=None): 
        """
        param args {Dict}
        param args.cancel {Number}: Value should be the `contract_id` which received from the `portfolio` call.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'cancel': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'cancel',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def cashier(self, args=None): 
        """
        param args {Dict}
        param args.address {String}: [Optional] Address for crypto withdrawal. Only applicable for `api` type.
        param args.amount {Number}: [Optional] Amount for crypto withdrawal. Only applicable for `api` type.
        param args.cashier {String}: Operation which needs to be requested from cashier
        param args.dry_run {Number}: [Optional] If set to `1`, only validation is performed. Only applicable for `withdraw` using `crypto` provider and `api` type.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.provider {String}: [Optional] Cashier provider. `crypto` will be default option for crypto currency accounts.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.type {String}: [Optional] Data need to be returned from cashier. `api` is supported only for `crypto` provider.
        param args.verification_code {String}: [Optional] Email verification code (received from a `verify_email` call, which must be done first)
        """

        if args is None:
            args = {} 

        config = {
            'address': {
               'type': 'string'
            },
            'amount': {
               'type': 'numeric'
            },
            'cashier': {
               'required': 1,
               'type': 'string'
            },
            'dry_run': {
               'type': 'numeric'
            },
            'passthrough': {},
            'provider': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'type': {
               'type': 'string'
            },
            'verification_code': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'cashier',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def cashier_payments(self, args=None): 
        """
        param args {Dict}
        param args.cashier_payments {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.provider {String}: [Optional] Cashier provider. `crypto` will be default option for crypto currency accounts.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever there is update to crypto payments.
        param args.transaction_type {String}: [Optional] Type of transactions to receive.
        """

        if args is None:
            args = {} 

        config = {
            'cashier_payments': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'provider': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            },
            'transaction_type': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'cashier_payments',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def cashier_withdrawal_cancel(self, args=None): 
        """
        param args {Dict}
        param args.cashier_withdrawal_cancel {Number}: Must be `1`
        param args.id {String}: The unique identifier for the transaction.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'cashier_withdrawal_cancel': {
               'required': 1,
               'type': 'numeric'
            },
            'id': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'cashier_withdrawal_cancel',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def change_password(self, args=None): 
        """
        param args {Dict}
        param args.change_password {Number}: Must be `1`
        param args.new_password {String}: New password (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address)
        param args.old_password {String}: Old password for validation (non-empty string, accepts any printable ASCII character)
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'change_password': {
               'required': 1,
               'type': 'numeric'
            },
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'old_password': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'change_password',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def contract_update(self, args=None): 
        """
        param args {Dict}
        param args.contract_id {Number}: Internal unique contract identifier.
        param args.contract_update {Number}: Must be `1`
        param args.limit_order {Any}: 
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'contract_id': {
               'required': 1,
               'type': 'numeric'
            },
            'contract_update': {
               'required': 1,
               'type': 'numeric'
            },
            'limit_order': {
               'stop_loss': {},
               'take_profit': {}
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'contract_update',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def contract_update_history(self, args=None): 
        """
        param args {Dict}
        param args.contract_id {Number}: Internal unique contract identifier.
        param args.contract_update_history {Number}: Must be `1`
        param args.limit {Number}: [Optional] Maximum number of historical updates to receive.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'contract_id': {
               'required': 1,
               'type': 'numeric'
            },
            'contract_update_history': {
               'required': 1,
               'type': 'numeric'
            },
            'limit': {
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'contract_update_history',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def contracts_for(self, args=None): 
        """
        param args {Dict}
        param args.contracts_for {String}: The short symbol name (obtained from `active_symbols` call).
        param args.currency {String}: [Optional] Currency of the contract's stake and payout (obtained from `payout_currencies` call).
        param args.landing_company {String}: [Optional] Indicates which landing company to get a list of contracts for. If you are logged in, your account's landing company will override this field.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.product_type {String}: [Optional] If you specify this field, only contracts tradable through that contract type will be returned.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'contracts_for': {
               'required': 1,
               'type': 'string'
            },
            'currency': {
               'type': 'string'
            },
            'landing_company': {
               'type': 'string'
            },
            'passthrough': {},
            'product_type': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'contracts_for',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def copy_start(self, args=None): 
        """
        param args {Dict}
        param args.assets {Any}: [Optional] Used to set assets to be copied. E.x ["frxUSDJPY", "R_50"]
        param args.copy_start {String}: API tokens identifying the accounts of trader which will be used to copy trades
        param args.max_trade_stake {Number}: [Optional] Used to set maximum trade stake to be copied.
        param args.min_trade_stake {Number}: [Optional] Used to set minimal trade stake to be copied.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trade_types {Any}: [Optional] Used to set trade types to be copied. E.x ["CALL", "PUT"]
        """

        if args is None:
            args = {} 

        config = {
            'assets': {},
            'copy_start': {
               'required': 1,
               'type': 'string'
            },
            'max_trade_stake': {
               'type': 'numeric'
            },
            'min_trade_stake': {
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'trade_types': {}
         }

        all_args = {
            'method': 'copy_start',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def copy_stop(self, args=None): 
        """
        param args {Dict}
        param args.copy_stop {String}: API tokens identifying the accounts which needs not to be copied
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'copy_stop': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'copy_stop',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def copytrading_list(self, args=None): 
        """
        param args {Dict}
        param args.copytrading_list {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'copytrading_list': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'copytrading_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def copytrading_statistics(self, args=None): 
        """
        param args {Dict}
        param args.copytrading_statistics {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trader_id {String}: The ID of the target trader.
        """

        if args is None:
            args = {} 

        config = {
            'copytrading_statistics': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'trader_id': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'copytrading_statistics',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def document_upload(self, args=None): 
        """
        param args {Dict}
        param args.document_format {String}: Document file format
        param args.document_id {String}: [Optional] Document ID (required for Passport, Proof of ID and Driver's License)
        param args.document_issuing_country {String}: [Optional] 2-letter country code
        param args.document_type {String}: Document type
        param args.document_upload {Number}: Must be `1`
        param args.expected_checksum {String}: The checksum of the file to be uploaded
        param args.expiration_date {String}: [Optional] Document expiration date (required for Passport, Proof of ID and Driver's License)
        param args.file_size {Number}: Document size (should be less than 10MB)
        param args.lifetime_valid {Number}: [Optional] Boolean value that indicates whether this document is lifetime valid (only applies to POI document types, cancels out the expiration_date given if any)
        param args.page_type {String}: [Optional] To determine document side
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'document_format': {
               'required': 1,
               'type': 'string'
            },
            'document_id': {
               'type': 'string'
            },
            'document_issuing_country': {
               'type': 'string'
            },
            'document_type': {
               'required': 1,
               'type': 'string'
            },
            'document_upload': {
               'required': 1,
               'type': 'numeric'
            },
            'expected_checksum': {
               'required': 1,
               'type': 'string'
            },
            'expiration_date': {
               'type': 'string'
            },
            'file_size': {
               'required': 1,
               'type': 'numeric'
            },
            'lifetime_valid': {
               'type': 'numeric'
            },
            'page_type': {
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'document_upload',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def economic_calendar(self, args=None): 
        """
        param args {Dict}
        param args.currency {String}: [Optional] Currency symbol.
        param args.economic_calendar {Number}: Must be `1`
        param args.end_date {Number}: [Optional] End date.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.start_date {Number}: [Optional] Start date.
        """

        if args is None:
            args = {} 

        config = {
            'currency': {
               'type': 'string'
            },
            'economic_calendar': {
               'required': 1,
               'type': 'numeric'
            },
            'end_date': {
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'start_date': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'economic_calendar',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def exchange_rates(self, args=None): 
        """
        param args {Dict}
        param args.base_currency {String}: Base currency (can be obtained from `payout_currencies` call)
        param args.exchange_rates {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'base_currency': {
               'required': 1,
               'type': 'string'
            },
            'exchange_rates': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'exchange_rates',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def forget(self, args=None): 
        """
        param args {Dict}
        param args.forget {String}: ID of the real-time stream of messages to cancel.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'forget': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'forget',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def forget_all(self, args=None): 
        """
        param args {Dict}
        param args.forget_all {Any}: Cancel all streams by type. The value can be either a single type e.g. `"ticks"`, or an array of multiple types e.g. `["candles", "ticks"]`.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'forget_all': {
               'required': 1
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'forget_all',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def get_account_status(self, args=None): 
        """
        param args {Dict}
        param args.get_account_status {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'get_account_status': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'get_account_status',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def get_financial_assessment(self, args=None): 
        """
        param args {Dict}
        param args.get_financial_assessment {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'get_financial_assessment': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'get_financial_assessment',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def get_limits(self, args=None): 
        """
        param args {Dict}
        param args.get_limits {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'get_limits': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'get_limits',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def get_self_exclusion(self, args=None): 
        """
        param args {Dict}
        param args.get_self_exclusion {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'get_self_exclusion': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'get_self_exclusion',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def get_settings(self, args=None): 
        """
        param args {Dict}
        param args.get_settings {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'get_settings': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'get_settings',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def identity_verification_document_add(self, args=None): 
        """
        param args {Dict}
        param args.document_number {String}: The identification number of the document.
        param args.document_type {String}: The type of the document based on provided `issuing_country` (can obtained from `residence_list` call).
        param args.identity_verification_document_add {Number}: Must be `1`
        param args.issuing_country {String}: 2-letter country code (can obtained from `residence_list` call).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'document_number': {
               'required': 1,
               'type': 'string'
            },
            'document_type': {
               'required': 1,
               'type': 'string'
            },
            'identity_verification_document_add': {
               'required': 1,
               'type': 'numeric'
            },
            'issuing_country': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'identity_verification_document_add',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def landing_company(self, args=None): 
        """
        param args {Dict}
        param args.landing_company {String}: Client's 2-letter country code (obtained from `residence_list` call).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'landing_company': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'landing_company',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def landing_company_details(self, args=None): 
        """
        param args {Dict}
        param args.landing_company_details {String}: Landing company shortcode.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'landing_company_details': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'landing_company_details',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def link_wallet(self, args=None): 
        """
        param args {Dict}
        param args.client_id {String}: The unique identifier for this trading account.
        param args.link_wallet {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.wallet_id {String}: The unique identifier for this wallet.
        """

        if args is None:
            args = {} 

        config = {
            'client_id': {
               'required': 1,
               'type': 'string'
            },
            'link_wallet': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'wallet_id': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'link_wallet',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def login_history(self, args=None): 
        """
        param args {Dict}
        param args.limit {Number}: [Optional] Apply limit to count of login history records.
        param args.login_history {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'limit': {
               'type': 'numeric'
            },
            'login_history': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'login_history',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def logout(self, args=None): 
        """
        param args {Dict}
        param args.logout {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'logout': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'logout',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_deposit(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: Amount to deposit (in the currency of from_binary); min = $1 or an equivalent amount, max = $20000 or an equivalent amount
        param args.from_binary {String}: Binary account loginid to transfer money from
        param args.mt5_deposit {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.to_mt5 {String}: MT5 account login to deposit money to
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'type': 'numeric'
            },
            'from_binary': {
               'type': 'string'
            },
            'mt5_deposit': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'to_mt5': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'mt5_deposit',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_get_settings(self, args=None): 
        """
        param args {Dict}
        param args.login {String}: MT5 user login
        param args.mt5_get_settings {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'login': {
               'required': 1,
               'type': 'string'
            },
            'mt5_get_settings': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'mt5_get_settings',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_login_list(self, args=None): 
        """
        param args {Dict}
        param args.mt5_login_list {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'mt5_login_list': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'mt5_login_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_new_account(self, args=None): 
        """
        param args {Dict}
        param args.account_type {String}: Account type. If set to 'financial', setting 'mt5_account_type' is also required.
        param args.address {String}: [Optional] The address of the user. The maximum length of this address field is 128 characters.
        param args.city {String}: [Optional] User's city of residence.
        param args.company {String}: [Optional] Name of the client's company. The maximum length of the company name is 64 characters.
        param args.country {String}: [Optional] 2-letter country code (value received from `residence_list` call).
        param args.currency {String}: [Optional] MT5 account currency, the default value will be the qualified account currency.
        param args.dry_run {Number}: [Optional] If set to 1, only validation is performed.
        param args.email {String}: Email address
        param args.investPassword {String}: [Optional] The investor password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
        param args.leverage {Number}: Client leverage (from 1 to 1000).
        param args.mainPassword {String}: The master password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address). This field is required.
        param args.mt5_account_category {String}: [Optional] To choose whether account is conventional or swap_free. Unavailable for financial_stp MT5_account_type
        param args.mt5_account_type {String}: [Optional] Financial: Variable spreads, High leverage. Financial STP: Variable spreads, Medium Leverage, more products. If 'account_type' set to 'financial', setting 'mt5_account_type' is also required.
        param args.mt5_new_account {Number}: Must be `1`
        param args.name {String}: Client's name. The maximum length here is 101 characters.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.phone {String}: [Optional] User's phone number.
        param args.phonePassword {String}: [Optional] The user's phone password.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.server {Any}: [Optional] Trade server.
        param args.state {String}: [Optional] User's state (region) of residence.
        param args.zipCode {String}: [Optional] User's zip code.
        """

        if args is None:
            args = {} 

        config = {
            'account_type': {
               'required': 1,
               'type': 'string'
            },
            'address': {
               'type': 'string'
            },
            'city': {
               'type': 'string'
            },
            'company': {
               'type': 'string'
            },
            'country': {
               'type': 'string'
            },
            'currency': {
               'type': 'string'
            },
            'dry_run': {
               'type': 'numeric'
            },
            'email': {
               'required': 1,
               'type': 'string'
            },
            'investPassword': {
               'type': 'string'
            },
            'leverage': {
               'required': 1,
               'type': 'numeric'
            },
            'mainPassword': {
               'required': 1,
               'type': 'string'
            },
            'mt5_account_category': {
               'type': 'string'
            },
            'mt5_account_type': {
               'type': 'string'
            },
            'mt5_new_account': {
               'required': 1,
               'type': 'numeric'
            },
            'name': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'phone': {
               'type': 'string'
            },
            'phonePassword': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'server': {},
            'state': {
               'type': 'string'
            },
            'zipCode': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'mt5_new_account',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_password_change(self, args=None): 
        """
        param args {Dict}
        param args.login {String}: MT5 user login
        param args.mt5_password_change {Number}: Must be `1`
        param args.new_password {String}: New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
        param args.old_password {String}: Old password for validation (non-empty string, accepts any printable ASCII character)
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.password_type {String}: [Optional] Type of the password to change.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'login': {
               'required': 1,
               'type': 'string'
            },
            'mt5_password_change': {
               'required': 1,
               'type': 'numeric'
            },
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'old_password': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'password_type': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'mt5_password_change',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_password_check(self, args=None): 
        """
        param args {Dict}
        param args.login {String}: MT5 user login
        param args.mt5_password_check {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.password {String}: The password of the account.
        param args.password_type {String}: [Optional] Type of the password to check.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'login': {
               'required': 1,
               'type': 'string'
            },
            'mt5_password_check': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'password': {
               'required': 1,
               'type': 'string'
            },
            'password_type': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'mt5_password_check',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_password_reset(self, args=None): 
        """
        param args {Dict}
        param args.login {String}: MT5 user login
        param args.mt5_password_reset {Number}: Must be `1`
        param args.new_password {String}: New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.password_type {String}: [Optional] Type of the password to reset.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.verification_code {String}: Email verification code (received from a `verify_email` call, which must be done first)
        """

        if args is None:
            args = {} 

        config = {
            'login': {
               'required': 1,
               'type': 'string'
            },
            'mt5_password_reset': {
               'required': 1,
               'type': 'numeric'
            },
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'password_type': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'verification_code': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'mt5_password_reset',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def mt5_withdrawal(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: Amount to withdraw (in the currency of the MT5 account); min = $1 or an equivalent amount, max = $20000 or an equivalent amount.
        param args.from_mt5 {String}: MT5 account login to withdraw money from
        param args.mt5_withdrawal {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.to_binary {String}: Binary account loginid to transfer money to
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'required': 1,
               'type': 'numeric'
            },
            'from_mt5': {
               'required': 1,
               'type': 'string'
            },
            'mt5_withdrawal': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'to_binary': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'mt5_withdrawal',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def new_account_maltainvest(self, args=None): 
        """
        param args {Dict}
        param args.accept_risk {Number}: Show whether client has accepted risk disclaimer.
        param args.account_opening_reason {String}: [Optional] Purpose and reason for requesting the account opening.
        param args.account_turnover {String}: [Optional] The anticipated account turnover.
        param args.address_city {String}: Within 100 characters
        param args.address_line_1 {String}: Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-
        param args.address_line_2 {String}: [Optional] Within 70 characters.
        param args.address_postcode {String}: [Optional] Within 20 characters and may not contain '+'.
        param args.address_state {String}: [Optional] Possible value receive from `states_list` call.
        param args.affiliate_token {String}: [Optional] Affiliate token, within 32 characters.
        param args.binary_options_trading_experience {String}: [Optional] Binary options trading experience.
        param args.binary_options_trading_frequency {String}: [Optional] Binary options trading frequency.
        param args.cfd_trading_experience {String}: [Optional] CFDs trading experience.
        param args.cfd_trading_frequency {String}: [Optional] CFDs trading frequency.
        param args.citizen {String}: [Optional] Country of legal citizenship, 2-letter country code. Possible value receive from `residence_list` call.
        param args.client_type {String}: [Optional] Indicates whether this is for a client requesting an account with professional status.
        param args.date_of_birth {String}: Date of birth format: yyyy-mm-dd.
        param args.education_level {String}: Level of Education
        param args.employment_industry {String}: Industry of Employment.
        param args.employment_status {String}: [Optional] Employment Status.
        param args.estimated_worth {String}: Estimated Net Worth.
        param args.first_name {String}: Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.forex_trading_experience {String}: [Optional] Forex trading experience.
        param args.forex_trading_frequency {String}: [Optional] Forex trading frequency.
        param args.income_source {String}: Income Source.
        param args.last_name {String}: Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.net_income {String}: Net Annual Income.
        param args.new_account_maltainvest {Number}: Must be `1`
        param args.non_pep_declaration {Number}: [Optional] Indicates client's self-declaration of not being a PEP/RCA.
        param args.occupation {String}: Occupation.
        param args.other_instruments_trading_experience {String}: [Optional] Trading experience in other financial instruments.
        param args.other_instruments_trading_frequency {String}: [Optional] Trading frequency in other financial instruments.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.phone {Any}: [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.
        param args.place_of_birth {String}: [Optional] Place of birth, 2-letter country code.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.residence {String}: 2-letter country code, possible value receive from `residence_list` call.
        param args.salutation {String}: Accept any value in enum list.
        param args.secret_answer {String}: [Optional] Answer to secret question, within 4-50 characters.
        param args.secret_question {String}: [Optional] Accept any value in enum list.
        param args.source_of_wealth {String}: [Optional] Source of wealth.
        param args.tax_identification_number {String}: Tax identification number. Only applicable for real money account. Required for `maltainvest` landing company.
        param args.tax_residence {String}: Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for `maltainvest` landing company.
        """

        if args is None:
            args = {} 

        config = {
            'accept_risk': {
               'required': 1,
               'type': 'numeric'
            },
            'account_opening_reason': {
               'type': 'string'
            },
            'account_turnover': {
               'type': 'string'
            },
            'address_city': {
               'required': 1,
               'type': 'string'
            },
            'address_line_1': {
               'required': 1,
               'type': 'string'
            },
            'address_line_2': {
               'type': 'string'
            },
            'address_postcode': {
               'type': 'string'
            },
            'address_state': {
               'type': 'string'
            },
            'affiliate_token': {
               'type': 'string'
            },
            'binary_options_trading_experience': {
               'type': 'string'
            },
            'binary_options_trading_frequency': {
               'type': 'string'
            },
            'cfd_trading_experience': {
               'type': 'string'
            },
            'cfd_trading_frequency': {
               'type': 'string'
            },
            'citizen': {
               'type': 'string'
            },
            'client_type': {
               'type': 'string'
            },
            'date_of_birth': {
               'required': 1,
               'type': 'string'
            },
            'education_level': {
               'required': 1,
               'type': 'string'
            },
            'employment_industry': {
               'required': 1,
               'type': 'string'
            },
            'employment_status': {
               'type': 'string'
            },
            'estimated_worth': {
               'required': 1,
               'type': 'string'
            },
            'first_name': {
               'required': 1,
               'type': 'string'
            },
            'forex_trading_experience': {
               'type': 'string'
            },
            'forex_trading_frequency': {
               'type': 'string'
            },
            'income_source': {
               'required': 1,
               'type': 'string'
            },
            'last_name': {
               'required': 1,
               'type': 'string'
            },
            'net_income': {
               'required': 1,
               'type': 'string'
            },
            'new_account_maltainvest': {
               'required': 1,
               'type': 'numeric'
            },
            'non_pep_declaration': {
               'type': 'numeric'
            },
            'occupation': {
               'required': 1,
               'type': 'string'
            },
            'other_instruments_trading_experience': {
               'type': 'string'
            },
            'other_instruments_trading_frequency': {
               'type': 'string'
            },
            'passthrough': {},
            'phone': {},
            'place_of_birth': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'residence': {
               'required': 1,
               'type': 'string'
            },
            'salutation': {
               'required': 1,
               'type': 'string'
            },
            'secret_answer': {
               'type': 'string'
            },
            'secret_question': {
               'type': 'string'
            },
            'source_of_wealth': {
               'type': 'string'
            },
            'tax_identification_number': {
               'required': 1,
               'type': 'string'
            },
            'tax_residence': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'new_account_maltainvest',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def new_account_real(self, args=None): 
        """
        param args {Dict}
        param args.account_opening_reason {String}: [Optional] Purpose and reason for requesting the account opening.
        param args.account_turnover {String}: [Optional] The anticipated account turnover.
        param args.address_city {String}: [Optional] Within 100 characters.
        param args.address_line_1 {String}: Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-
        param args.address_line_2 {String}: [Optional] Within 70 characters.
        param args.address_postcode {String}: [Optional] Within 20 characters and may not contain '+'.
        param args.address_state {String}: [Optional] Possible value receive from `states_list` call.
        param args.affiliate_token {String}: [Optional] Affiliate token, within 32 characters.
        param args.citizen {Any}: [Optional] Country of legal citizenship, 2-letter country code.
        param args.client_type {String}: [Optional] Indicates whether this is for a client requesting an account with professional status.
        param args.currency {String}: [Optional] To set currency of the account. List of supported currencies can be acquired with `payout_currencies` call.
        param args.date_of_birth {String}: Date of birth format: `yyyy-mm-dd`.
        param args.first_name {String}: Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.last_name {String}: Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.new_account_real {Number}: Must be `1`
        param args.non_pep_declaration {Number}: [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.phone {Any}: [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.
        param args.place_of_birth {String}: [Optional] Place of birth, 2-letter country code.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.residence {String}: 2-letter country code, possible value receive from `residence_list` call.
        param args.salutation {String}: [Optional] Accept any value in enum list.
        param args.secret_answer {String}: [Optional] Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client open another account.
        param args.secret_question {String}: [Optional] Accept any value in enum list. Required for new account and existing client details will be used if client open another account.
        param args.tax_identification_number {String}: [Optional] Tax identification number. Only applicable for real money account. Required for `maltainvest` landing company.
        param args.tax_residence {String}: [Optional] Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for `maltainvest` landing company.
        """

        if args is None:
            args = {} 

        config = {
            'account_opening_reason': {
               'type': 'string'
            },
            'account_turnover': {
               'type': 'string'
            },
            'address_city': {
               'type': 'string'
            },
            'address_line_1': {
               'type': 'string'
            },
            'address_line_2': {
               'type': 'string'
            },
            'address_postcode': {
               'type': 'string'
            },
            'address_state': {
               'type': 'string'
            },
            'affiliate_token': {
               'type': 'string'
            },
            'citizen': {},
            'client_type': {
               'type': 'string'
            },
            'currency': {
               'type': 'string'
            },
            'date_of_birth': {
               'type': 'string'
            },
            'first_name': {
               'type': 'string'
            },
            'last_name': {
               'type': 'string'
            },
            'new_account_real': {
               'required': 1,
               'type': 'numeric'
            },
            'non_pep_declaration': {
               'type': 'numeric'
            },
            'passthrough': {},
            'phone': {},
            'place_of_birth': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'residence': {
               'type': 'string'
            },
            'salutation': {
               'type': 'string'
            },
            'secret_answer': {
               'type': 'string'
            },
            'secret_question': {
               'type': 'string'
            },
            'tax_identification_number': {
               'type': 'string'
            },
            'tax_residence': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'new_account_real',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def new_account_virtual(self, args=None): 
        """
        param args {Dict}
        param args.affiliate_token {String}: [Optional] Affiliate token, within 32 characters.
        param args.client_password {String}: Password (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
        param args.date_first_contact {String}: [Optional] Date of first contact, format: `yyyy-mm-dd` in GMT timezone.
        param args.email_consent {Number}: [Optional] Boolean value: 1 or 0, indicating whether the client has given consent for marketing emails.
        param args.gclid_url {String}: [Optional] Google Click Identifier to track source.
        param args.new_account_virtual {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.residence {String}: 2-letter country code (obtained from `residence_list` call).
        param args.signup_device {String}: [Optional] Show whether user has used mobile or desktop.
        param args.type {String}: Account type
        param args.utm_ad_id {Any}: [Optional] Identifier of particular ad. Value must match Regex pattern to be recorded
        param args.utm_adgroup_id {Any}: [Optional] Identifier of ad group in the campaign. Value must match Regex pattern to be recorded
        param args.utm_adrollclk_id {Any}: [Optional] Unique identifier of click on AdRoll ads platform. Value must match Regex pattern to be recorded
        param args.utm_campaign {Any}: [Optional] Identifies a specific product promotion or strategic campaign such as a spring sale or other promotions. Value must match Regex pattern to be recorded
        param args.utm_campaign_id {Any}: [Optional] Identifier of paid ad campaign. Value must match Regex pattern to be recorded
        param args.utm_content {Any}: [Optional] Used to differentiate similar content, or links within the same ad. Value must match Regex pattern to be recorded
        param args.utm_fbcl_id {Any}: [Optional] Unique identifier of click on Facebook ads platform. Value must match Regex pattern to be recorded
        param args.utm_gl_client_id {Any}: [Optional] Unique visitor identifier on Google Ads platform. Value must match Regex pattern to be recorded
        param args.utm_medium {Any}: [Optional] Identifies the medium the link was used upon such as: email, CPC, or other methods of sharing. Value must match Regex pattern to be recorded
        param args.utm_msclk_id {Any}: [Optional] Unique click identifier on Microsoft Bing ads platform. Value must match Regex pattern to be recorded
        param args.utm_source {Any}: [Optional] Identifies the source of traffic such as: search engine, newsletter, or other referral. Value must match Regex pattern to be recorded
        param args.utm_term {Any}: [Optional] Used to send information related to the campaign term like paid search keywords. Value must match Regex pattern to be recorded
        param args.verification_code {String}: Email verification code (received from a `verify_email` call, which must be done first).
        """

        if args is None:
            args = {} 

        config = {
            'affiliate_token': {
               'type': 'string'
            },
            'client_password': {
               'type': 'string'
            },
            'date_first_contact': {
               'type': 'string'
            },
            'email_consent': {
               'type': 'numeric'
            },
            'gclid_url': {
               'type': 'string'
            },
            'new_account_virtual': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'residence': {
               'type': 'string'
            },
            'signup_device': {
               'type': 'string'
            },
            'type': {
               'type': 'string'
            },
            'utm_ad_id': {},
            'utm_adgroup_id': {},
            'utm_adrollclk_id': {},
            'utm_campaign': {},
            'utm_campaign_id': {},
            'utm_content': {},
            'utm_fbcl_id': {},
            'utm_gl_client_id': {},
            'utm_medium': {},
            'utm_msclk_id': {},
            'utm_source': {},
            'utm_term': {},
            'verification_code': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'new_account_virtual',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def new_account_wallet(self, args=None): 
        """
        param args {Dict}
        param args.address_city {String}: [Optional] Within 35 characters.
        param args.address_line_1 {String}: [Optional] Mailing address.
        param args.address_line_2 {String}: [Optional] Within 70 characters.
        param args.address_postcode {String}: [Optional] Within 20 characters and may not contain '+'.
        param args.address_state {String}: [Optional] Possible value receive from `states_list` call.
        param args.currency {String}: [Optional] To set currency of the account. List of supported currencies can be acquired with `payout_currencies` call.
        param args.date_of_birth {String}: [Optional] Date of birth format: `yyyy-mm-dd`.
        param args.first_name {String}: [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.last_name {String}: [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
        param args.new_account_wallet {Number}: Must be `1`
        param args.non_pep_declaration {Number}: [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_method {String}: To set method which is used to transfer to/from wallet.
        param args.phone {String}: [Optional] Starting with `+` followed by 8-35 digits, allowing hyphens or space.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'address_city': {
               'type': 'string'
            },
            'address_line_1': {
               'type': 'string'
            },
            'address_line_2': {
               'type': 'string'
            },
            'address_postcode': {
               'type': 'string'
            },
            'address_state': {
               'type': 'string'
            },
            'currency': {
               'required': 1,
               'type': 'string'
            },
            'date_of_birth': {
               'type': 'string'
            },
            'first_name': {
               'type': 'string'
            },
            'last_name': {
               'type': 'string'
            },
            'new_account_wallet': {
               'required': 1,
               'type': 'numeric'
            },
            'non_pep_declaration': {
               'type': 'numeric'
            },
            'passthrough': {},
            'payment_method': {
               'required': 1,
               'type': 'string'
            },
            'phone': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'new_account_wallet',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def notification_event(self, args=None): 
        """
        param args {Dict}
        param args.args {Any}: 
        param args.category {String}: The category or nature of the event.
        param args.event {String}: The name of the event.
        param args.notification_event {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'args': {
               'documents': {}
            },
            'category': {
               'required': 1,
               'type': 'string'
            },
            'event': {
               'required': 1,
               'type': 'string'
            },
            'notification_event': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'notification_event',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def oauth_apps(self, args=None): 
        """
        param args {Dict}
        param args.oauth_apps {Number}: Must be `1`
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'oauth_apps': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'oauth_apps',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advert_create(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: The total amount of the advert, in advertiser's account currency.
        param args.contact_info {String}: [Optional] Advertiser contact information. Only applicable for 'sell adverts'.
        param args.description {String}: [Optional] General information about the advert.
        param args.local_currency {String}: [Optional] Local currency for this advert. If not provided, will use the currency of client's residence by default.
        param args.max_order_amount {Number}: Maximum allowed amount for the orders of this advert, in advertiser's `account_currency`. Should be less than or equal to total `amount` of the advert.
        param args.min_order_amount {Number}: Minimum allowed amount for the orders of this advert, in advertiser's `account_currency`. Should be less than `max_order_amount`.
        param args.p2p_advert_create {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_info {String}: [Optional] Payment instructions. Only applicable for 'sell adverts'.
        param args.payment_method {String}: Supported payment methods. Separate multiple values with a comma, maximum 3.
        param args.payment_method_ids {Any}: IDs of payment methods, only applicable for sell ads.
        param args.rate {Number}: Conversion rate from advertiser's account currency to `local_currency`.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.type {String}: Whether this is a buy or a sell.
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'required': 1,
               'type': 'numeric'
            },
            'contact_info': {
               'type': 'string'
            },
            'description': {
               'type': 'string'
            },
            'local_currency': {
               'type': 'string'
            },
            'max_order_amount': {
               'required': 1,
               'type': 'numeric'
            },
            'min_order_amount': {
               'required': 1,
               'type': 'numeric'
            },
            'p2p_advert_create': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'payment_info': {
               'type': 'string'
            },
            'payment_method': {
               'type': 'string'
            },
            'payment_method_ids': {},
            'rate': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'type': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'p2p_advert_create',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advert_info(self, args=None): 
        """
        param args {Dict}
        param args.id {String}: [Optional] The unique identifier for this advert. Optional when subscribe is 1. If not provided, all advertiser adverts will be subscribed.
        param args.p2p_advert_info {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates when changes occur. Optional when id is provided.
        param args.use_client_limits {Number}: [Optional] If set to 1, the maximum order amount will be adjusted to the current balance and turnover limits of the account.
        """

        if args is None:
            args = {} 

        config = {
            'id': {
               'type': 'string'
            },
            'p2p_advert_info': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            },
            'use_client_limits': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advert_info',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advert_list(self, args=None): 
        """
        param args {Dict}
        param args.advertiser_id {String}: [Optional] ID of the advertiser to list adverts for.
        param args.advertiser_name {String}: [Optional] Search for advertiser by name. Partial matches will be returned.
        param args.amount {Number}: [Optional] How much to buy or sell, used to calculate prices.
        param args.counterparty_type {String}: [Optional] Filter the adverts by `counterparty_type`.
        param args.favourites_only {Number}: [Optional] Only show adverts from favourite advertisers. Default is 0.
        param args.limit {Number}: [Optional] Used for paging.
        param args.local_currency {String}: [Optional] Currency to conduct payment transaction in, defaults to the main currency for the client's country.
        param args.offset {Number}: [Optional] Used for paging.
        param args.p2p_advert_list {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_method {Any}: [Optional] Search by supported payment methods.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.sort_by {String}: [Optional] How the results are sorted: best rate, or advertiser completion rate.
        param args.use_client_limits {Number}: [Optional] If set to 1, ads that exceed this account's balance or turnover limits will not be shown.
        """

        if args is None:
            args = {} 

        config = {
            'advertiser_id': {
               'type': 'string'
            },
            'advertiser_name': {
               'type': 'string'
            },
            'amount': {
               'type': 'numeric'
            },
            'counterparty_type': {
               'type': 'string'
            },
            'favourites_only': {
               'type': 'numeric'
            },
            'limit': {
               'type': 'numeric'
            },
            'local_currency': {
               'type': 'string'
            },
            'offset': {
               'type': 'numeric'
            },
            'p2p_advert_list': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'payment_method': {},
            'req_id': {
               'type': 'numeric'
            },
            'sort_by': {
               'type': 'string'
            },
            'use_client_limits': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advert_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advert_update(self, args=None): 
        """
        param args {Dict}
        param args.delete {Number}: [Optional] If set to 1, permanently deletes the advert.
        param args.id {String}: The unique identifier for this advert.
        param args.is_active {Number}: [Optional] Activate or deactivate the advert.
        param args.p2p_advert_update {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_method {String}: [Optional] Supported payment methods. Separate multiple values with a comma, maximum 3.
        param args.payment_method_ids {Any}: [Optional] IDs of payment methods, only applicable for sell ads. Will replace exisiting methods.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'delete': {
               'type': 'numeric'
            },
            'id': {
               'required': 1,
               'type': 'string'
            },
            'is_active': {
               'type': 'numeric'
            },
            'p2p_advert_update': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'payment_method': {
               'type': 'string'
            },
            'payment_method_ids': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advert_update',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advertiser_adverts(self, args=None): 
        """
        param args {Dict}
        param args.limit {Number}: [Optional] Used for paging. This value will also apply to subsription responses.
        param args.offset {Number}: [Optional] Used for paging. This value will also apply to subsription responses.
        param args.p2p_advertiser_adverts {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'limit': {
               'type': 'numeric'
            },
            'offset': {
               'type': 'numeric'
            },
            'p2p_advertiser_adverts': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advertiser_adverts',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advertiser_create(self, args=None): 
        """
        param args {Dict}
        param args.contact_info {String}: [Optional] Advertiser's contact information, to be used as a default for new sell adverts.
        param args.default_advert_description {String}: [Optional] Default description that can be used every time an advert is created.
        param args.name {String}: The advertiser's displayed name.
        param args.p2p_advertiser_create {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_info {String}: [Optional] Advertiser's payment information, to be used as a default for new sell adverts.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever there is an update to advertiser
        """

        if args is None:
            args = {} 

        config = {
            'contact_info': {
               'type': 'string'
            },
            'default_advert_description': {
               'type': 'string'
            },
            'name': {
               'required': 1,
               'type': 'string'
            },
            'p2p_advertiser_create': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'payment_info': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advertiser_create',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advertiser_info(self, args=None): 
        """
        param args {Dict}
        param args.id {String}: [Optional] The unique identifier for this advertiser. If not provided, returns advertiser information about the current account.
        param args.p2p_advertiser_info {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever there is an update to advertiser
        """

        if args is None:
            args = {} 

        config = {
            'id': {
               'type': 'string'
            },
            'p2p_advertiser_info': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advertiser_info',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advertiser_payment_methods(self, args=None): 
        """
        param args {Dict}
        param args.create {Any}: Contains new payment method entries.
        param args.delete {Any}: Contains payment methods to delete.
        param args.p2p_advertiser_payment_methods {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.update {Any}: Contains payment methods to update.
        """

        if args is None:
            args = {} 

        config = {
            'create': {},
            'delete': {},
            'p2p_advertiser_payment_methods': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'update': {}
         }

        all_args = {
            'method': 'p2p_advertiser_payment_methods',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advertiser_relations(self, args=None): 
        """
        param args {Dict}
        param args.add_blocked {Any}: IDs of advertisers to block.
        param args.add_favourites {Any}: IDs of advertisers to add as favourites.
        param args.p2p_advertiser_relations {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.remove_blocked {Any}: IDs of advertisers to remove from blocked.
        param args.remove_favourites {Any}: IDs of advertisers to remove from favourites.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'add_blocked': {},
            'add_favourites': {},
            'p2p_advertiser_relations': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'remove_blocked': {},
            'remove_favourites': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advertiser_relations',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_advertiser_update(self, args=None): 
        """
        param args {Dict}
        param args.contact_info {String}: [Optional] Advertiser's contact information, to be used as a default for new sell adverts.
        param args.default_advert_description {String}: [Optional] Default description that can be used every time an advert is created.
        param args.is_listed {Number}: [Optional] Used to set if the advertiser's adverts could be listed. When `0`, adverts won't be listed regardless of they are active or not. This doesn't change the `is_active` of each individual advert.
        param args.p2p_advertiser_update {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_info {String}: [Optional] Advertiser's payment information, to be used as a default for new sell adverts.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.show_name {Number}: [Optional] When `1`, the advertiser's real name will be displayed on to other users on adverts and orders.
        """

        if args is None:
            args = {} 

        config = {
            'contact_info': {
               'type': 'string'
            },
            'default_advert_description': {
               'type': 'string'
            },
            'is_listed': {
               'type': 'numeric'
            },
            'p2p_advertiser_update': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'payment_info': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'show_name': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_advertiser_update',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_chat_create(self, args=None): 
        """
        param args {Dict}
        param args.order_id {String}: The unique identifier for the order to create the chat for.
        param args.p2p_chat_create {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'order_id': {
               'required': 1,
               'type': 'string'
            },
            'p2p_chat_create': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_chat_create',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_order_cancel(self, args=None): 
        """
        param args {Dict}
        param args.id {String}: The unique identifier for this order.
        param args.p2p_order_cancel {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'id': {
               'required': 1,
               'type': 'string'
            },
            'p2p_order_cancel': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_order_cancel',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_order_confirm(self, args=None): 
        """
        param args {Dict}
        param args.id {String}: The unique identifier for this order.
        param args.p2p_order_confirm {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'id': {
               'required': 1,
               'type': 'string'
            },
            'p2p_order_confirm': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_order_confirm',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_order_create(self, args=None): 
        """
        param args {Dict}
        param args.advert_id {String}: The unique identifier for the advert to create an order against.
        param args.amount {Number}: The amount of currency to be bought or sold.
        param args.contact_info {String}: [Optional] Seller contact information. Only applicable for 'sell orders'.
        param args.p2p_order_create {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_info {String}: [Optional] Payment instructions, only applicable for sell orders.
        param args.payment_method_ids {Any}: IDs of payment methods, only applicable for sell orders.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever there is an update to the order.
        """

        if args is None:
            args = {} 

        config = {
            'advert_id': {
               'required': 1,
               'type': 'string'
            },
            'amount': {
               'required': 1,
               'type': 'numeric'
            },
            'contact_info': {
               'type': 'string'
            },
            'p2p_order_create': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'payment_info': {
               'type': 'string'
            },
            'payment_method_ids': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_order_create',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_order_dispute(self, args=None): 
        """
        param args {Dict}
        param args.dispute_reason {String}: The predefined dispute reason
        param args.id {String}: The unique identifier for this order.
        param args.p2p_order_dispute {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'dispute_reason': {
               'required': 1,
               'type': 'string'
            },
            'id': {
               'required': 1,
               'type': 'string'
            },
            'p2p_order_dispute': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_order_dispute',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_order_info(self, args=None): 
        """
        param args {Dict}
        param args.id {String}: The unique identifier for the order.
        param args.p2p_order_info {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever there is an update to order
        """

        if args is None:
            args = {} 

        config = {
            'id': {
               'required': 1,
               'type': 'string'
            },
            'p2p_order_info': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_order_info',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_order_list(self, args=None): 
        """
        param args {Dict}
        param args.active {Number}: [Optional] Should be 1 to list active, 0 to list inactive (historical).
        param args.advert_id {String}: [Optional] If present, lists orders applying to a specific advert.
        param args.limit {Number}: [Optional] Used for paging.
        param args.offset {Number}: [Optional] Used for paging.
        param args.p2p_order_list {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever there is a change to any order belonging to you.
        """

        if args is None:
            args = {} 

        config = {
            'active': {
               'type': 'numeric'
            },
            'advert_id': {
               'type': 'string'
            },
            'limit': {
               'type': 'numeric'
            },
            'offset': {
               'type': 'numeric'
            },
            'p2p_order_list': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_order_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def p2p_payment_methods(self, args=None): 
        """
        param args {Dict}
        param args.p2p_payment_methods {Number}: Must be 1
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'p2p_payment_methods': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'p2p_payment_methods',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def payment_methods(self, args=None): 
        """
        param args {Dict}
        param args.country {String}: [Optional] 2-letter country code (ISO standard).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_methods {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'country': {
               'type': 'string'
            },
            'passthrough': {},
            'payment_methods': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'payment_methods',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def paymentagent_create(self, args=None): 
        """
        param args {Dict}
        param args.affiliate_id {String}: [Optional] Client's My Affiliate id, if exists.
        param args.code_of_conduct_approval {Number}: Indicates client's agreement with the Code of Conduct.
        param args.commission_deposit {Number}: Commission  (%) the agent wants to take on deposits
        param args.commission_withdrawal {Number}: Commission  (%) the agent wants to take on withdrawals
        param args.email {String}: Payment agent's email address.
        param args.information {String}: [Optional] Information about payment agent and their proposed service.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payment_agent_name {String}: The name with which the payment agent is going to be identified.
        param args.paymentagent_create {Number}: Must be 1
        param args.phone {String}: Payment agent's phone number with coutry code.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.supported_payment_methods {Any}: A list of supported payment methods.
        param args.url {String}: The URL of payment agent's website.
        """

        if args is None:
            args = {} 

        config = {
            'affiliate_id': {
               'type': 'string'
            },
            'code_of_conduct_approval': {
               'required': 1,
               'type': 'numeric'
            },
            'commission_deposit': {
               'required': 1,
               'type': 'numeric'
            },
            'commission_withdrawal': {
               'required': 1,
               'type': 'numeric'
            },
            'email': {
               'required': 1,
               'type': 'string'
            },
            'information': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'payment_agent_name': {
               'required': 1,
               'type': 'string'
            },
            'paymentagent_create': {
               'required': 1,
               'type': 'numeric'
            },
            'phone': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'supported_payment_methods': {
               'required': 1
            },
            'url': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'paymentagent_create',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def paymentagent_details(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.paymentagent_details {Number}: Must be 1
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'paymentagent_details': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'paymentagent_details',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def paymentagent_list(self, args=None): 
        """
        param args {Dict}
        param args.currency {String}: [Optional] If specified, only payment agents that supports that currency will be returned (obtained from `payout_currencies` call).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.paymentagent_list {String}: Client's 2-letter country code (obtained from `residence_list` call).
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'currency': {
               'type': 'string'
            },
            'passthrough': {},
            'paymentagent_list': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'paymentagent_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def paymentagent_transfer(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: The amount to transfer.
        param args.currency {String}: Currency code.
        param args.description {String}: [Optional] Remarks about the transfer.
        param args.dry_run {Number}: [Optional] If set to `1`, just do validation.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.paymentagent_transfer {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.transfer_to {String}: The loginid of the recipient account.
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'required': 1,
               'type': 'numeric'
            },
            'currency': {
               'required': 1,
               'type': 'string'
            },
            'description': {
               'type': 'string'
            },
            'dry_run': {
               'type': 'numeric'
            },
            'passthrough': {},
            'paymentagent_transfer': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'transfer_to': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'paymentagent_transfer',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def paymentagent_withdraw(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: The amount to withdraw to the payment agent.
        param args.currency {String}: The currency code.
        param args.description {String}: [Optional] Remarks about the withdraw. Only letters, numbers, space, period, comma, - ' are allowed.
        param args.dry_run {Number}: [Optional] If set to 1, just do validation.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.paymentagent_loginid {String}: The payment agent loginid received from the `paymentagent_list` call.
        param args.paymentagent_withdraw {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.verification_code {String}: Email verification code (received from a `verify_email` call, which must be done first)
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'required': 1,
               'type': 'numeric'
            },
            'currency': {
               'required': 1,
               'type': 'string'
            },
            'description': {
               'type': 'string'
            },
            'dry_run': {
               'type': 'numeric'
            },
            'passthrough': {},
            'paymentagent_loginid': {
               'required': 1,
               'type': 'string'
            },
            'paymentagent_withdraw': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'verification_code': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'paymentagent_withdraw',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def payout_currencies(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.payout_currencies {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'payout_currencies': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'payout_currencies',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def ping(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.ping {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'ping': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'ping',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def portfolio(self, args=None): 
        """
        param args {Dict}
        param args.contract_type {Any}: Return only contracts of the specified types
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.portfolio {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'contract_type': {},
            'passthrough': {},
            'portfolio': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'portfolio',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def profit_table(self, args=None): 
        """
        param args {Dict}
        param args.contract_type {Any}: Return only contracts of the specified types
        param args.date_from {String}: [Optional] Start date (epoch or YYYY-MM-DD)
        param args.date_to {String}: [Optional] End date (epoch or YYYY-MM-DD)
        param args.description {Number}: [Optional] If set to 1, will return full contracts description.
        param args.limit {Number}: [Optional] Apply upper limit to count of transactions received.
        param args.offset {Number}: [Optional] Number of transactions to skip.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.profit_table {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.sort {String}: [Optional] Sort direction.
        """

        if args is None:
            args = {} 

        config = {
            'contract_type': {},
            'date_from': {
               'type': 'string'
            },
            'date_to': {
               'type': 'string'
            },
            'description': {
               'type': 'numeric'
            },
            'limit': {
               'type': 'numeric'
            },
            'offset': {
               'type': 'numeric'
            },
            'passthrough': {},
            'profit_table': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'sort': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'profit_table',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def proposal(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: [Optional] Proposed contract payout or stake, or multiplier (for lookbacks).
        param args.barrier {String}: [Optional] Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.
        param args.barrier2 {String}: [Optional] Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.
        param args.basis {String}: [Optional] Indicates type of the `amount`.
        param args.cancellation {String}: Cancellation duration option (only for `MULTUP` and `MULTDOWN` contracts).
        param args.contract_type {String}: The proposed contract type
        param args.currency {String}: This can only be the account-holder's currency (obtained from `payout_currencies` call).
        param args.date_expiry {Number}: [Optional] Epoch value of the expiry time of the contract. Either date_expiry or duration is required.
        param args.date_start {Number}: [Optional] Indicates epoch value of the starting time of the contract. If left empty, the start time of the contract is now.
        param args.duration {Number}: [Optional] Duration quantity. Either date_expiry or duration is required.
        param args.duration_unit {String}: [Optional] Duration unit - `s`: seconds, `m`: minutes, `h`: hours, `d`: days, `t`: ticks.
        param args.limit_order {Any}: 
        param args.multiplier {Number}: [Optional] The multiplier for non-binary options. E.g. lookbacks.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.product_type {String}: [Optional] The product type.
        param args.proposal {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.selected_tick {Number}: [Optional] The tick that is predicted to have the highest/lowest value - for `TICKHIGH` and `TICKLOW` contracts.
        param args.subscribe {Number}: [Optional] 1 - to initiate a realtime stream of prices. Note that tick trades (without a user-defined barrier), digit trades and less than 24 hours at-the-money contracts for the following underlying symbols are not streamed: `R_10`, `R_25`, `R_50`, `R_75`, `R_100`, `RDBULL`, `RDBEAR` (this is because their price is constant).
        param args.symbol {String}: The short symbol name (obtained from `active_symbols` call).
        param args.trading_period_start {Number}: [Optional] Required only for multi-barrier trading. Defines the epoch value of the trading period start time.
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'type': 'numeric'
            },
            'barrier': {
               'type': 'string'
            },
            'barrier2': {
               'type': 'string'
            },
            'basis': {
               'type': 'string'
            },
            'cancellation': {
               'type': 'string'
            },
            'contract_type': {
               'required': 1,
               'type': 'string'
            },
            'currency': {
               'required': 1,
               'type': 'string'
            },
            'date_expiry': {
               'type': 'numeric'
            },
            'date_start': {
               'type': 'numeric'
            },
            'duration': {
               'type': 'numeric'
            },
            'duration_unit': {
               'type': 'string'
            },
            'limit_order': {
               'stop_loss': {
                  'type': 'numeric'
               },
               'take_profit': {
                  'type': 'numeric'
               }
            },
            'multiplier': {
               'type': 'numeric'
            },
            'passthrough': {},
            'product_type': {
               'type': 'string'
            },
            'proposal': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'selected_tick': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            },
            'symbol': {
               'required': 1,
               'type': 'string'
            },
            'trading_period_start': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'proposal',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def proposal_open_contract(self, args=None): 
        """
        param args {Dict}
        param args.contract_id {Number}: [Optional] Contract ID received from a `portfolio` request. If not set, you will receive stream of all open contracts.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.proposal_open_contract {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] `1` to stream.
        """

        if args is None:
            args = {} 

        config = {
            'contract_id': {
               'type': 'numeric'
            },
            'passthrough': {},
            'proposal_open_contract': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'proposal_open_contract',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def reality_check(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.reality_check {Number}: Must be `1`
        param args.req_id {Number}: [Optional] Used to map request to response.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'reality_check': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'reality_check',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def request_report(self, args=None): 
        """
        param args {Dict}
        param args.date_from {Number}: Start date of the report
        param args.date_to {Number}: End date of the report
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.report_type {String}: Type of report to be sent to client's registered e-mail address
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.request_report {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'date_from': {
               'required': 1,
               'type': 'numeric'
            },
            'date_to': {
               'required': 1,
               'type': 'numeric'
            },
            'passthrough': {},
            'report_type': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'request_report': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'request_report',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def reset_password(self, args=None): 
        """
        param args {Dict}
        param args.date_of_birth {String}: [Optional] Date of birth format: `yyyy-mm-dd`. Only required for clients with real-money accounts.
        param args.new_password {String}: New password. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.reset_password {Number}: Must be `1`
        param args.verification_code {String}: Email verification code (received from a `verify_email` call, which must be done first)
        """

        if args is None:
            args = {} 

        config = {
            'date_of_birth': {
               'type': 'string'
            },
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'reset_password': {
               'required': 1,
               'type': 'numeric'
            },
            'verification_code': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'reset_password',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def residence_list(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.residence_list {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'residence_list': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'residence_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def revoke_oauth_app(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.revoke_oauth_app {Number}: The application ID to revoke.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'revoke_oauth_app': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'revoke_oauth_app',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def sell(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.price {Number}: Minimum price at which to sell the contract, or `0` for 'sell at market'.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.sell {Number}: Pass contract_id received from the `portfolio` call.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'price': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'sell': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'sell',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def sell_contract_for_multiple_accounts(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.price {Number}: Minimum price at which to sell the contract, or `0` for 'sell at market'.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.sell_contract_for_multiple_accounts {Number}: Must be `1`
        param args.shortcode {String}: An internal ID used to identify the contract which was originally bought. This is returned from the `buy` and `buy_contract_for_multiple_accounts` calls.
        param args.tokens {Any}: Authorisation tokens which select the accounts to sell use for the affected accounts.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'price': {
               'required': 1,
               'type': 'numeric'
            },
            'req_id': {
               'type': 'numeric'
            },
            'sell_contract_for_multiple_accounts': {
               'required': 1,
               'type': 'numeric'
            },
            'shortcode': {
               'required': 1,
               'type': 'string'
            },
            'tokens': {
               'required': 1
            }
         }

        all_args = {
            'method': 'sell_contract_for_multiple_accounts',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def sell_expired(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.sell_expired {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'sell_expired': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'sell_expired',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def service_token(self, args=None): 
        """
        param args {Dict}
        param args.country {String}: [Optional] The 2-letter country code.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.referrer {String}: [Optional] The URL of the web page where the Web SDK will be used.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.server {String}: Server (dxtrade only).
        param args.service {Any}: The service(s) to retrieve token(s) for.
        param args.service_token {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'country': {
               'type': 'string'
            },
            'passthrough': {},
            'referrer': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'server': {
               'type': 'string'
            },
            'service': {
               'required': 1
            },
            'service_token': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'service_token',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def set_account_currency(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.set_account_currency {String}: Currency of the account. List of supported currencies can be acquired with `payout_currencies` call.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'set_account_currency': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'set_account_currency',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def set_financial_assessment(self, args=None): 
        """
        param args {Dict}
        param args.account_turnover {String}: [Optional] The anticipated account turnover.
        param args.binary_options_trading_experience {String}: [Optional] Binary options trading experience.
        param args.binary_options_trading_frequency {String}: [Optional] Binary options trading frequency.
        param args.cfd_trading_experience {String}: [Optional] CFDs trading experience.
        param args.cfd_trading_frequency {String}: [Optional] CFDs trading frequency.
        param args.education_level {String}: Level of Education.
        param args.employment_industry {String}: Industry of Employment.
        param args.employment_status {String}: [Optional] Employment Status.
        param args.estimated_worth {String}: Estimated Net Worth.
        param args.forex_trading_experience {String}: [Optional] Forex trading experience.
        param args.forex_trading_frequency {String}: [Optional] Forex trading frequency.
        param args.income_source {String}: Income Source.
        param args.net_income {String}: Net Annual Income.
        param args.occupation {String}: Occupation.
        param args.other_instruments_trading_experience {String}: [Optional] Trading experience in other financial instruments.
        param args.other_instruments_trading_frequency {String}: [Optional] Trading frequency in other financial instruments.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.set_financial_assessment {Number}: Must be `1`
        param args.source_of_wealth {String}: [Optional] Source of wealth.
        """

        if args is None:
            args = {} 

        config = {
            'account_turnover': {
               'type': 'string'
            },
            'binary_options_trading_experience': {
               'type': 'string'
            },
            'binary_options_trading_frequency': {
               'type': 'string'
            },
            'cfd_trading_experience': {
               'type': 'string'
            },
            'cfd_trading_frequency': {
               'type': 'string'
            },
            'education_level': {
               'required': 1,
               'type': 'string'
            },
            'employment_industry': {
               'required': 1,
               'type': 'string'
            },
            'employment_status': {
               'type': 'string'
            },
            'estimated_worth': {
               'required': 1,
               'type': 'string'
            },
            'forex_trading_experience': {
               'type': 'string'
            },
            'forex_trading_frequency': {
               'type': 'string'
            },
            'income_source': {
               'required': 1,
               'type': 'string'
            },
            'net_income': {
               'required': 1,
               'type': 'string'
            },
            'occupation': {
               'required': 1,
               'type': 'string'
            },
            'other_instruments_trading_experience': {
               'type': 'string'
            },
            'other_instruments_trading_frequency': {
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'set_financial_assessment': {
               'required': 1,
               'type': 'numeric'
            },
            'source_of_wealth': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'set_financial_assessment',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def set_self_exclusion(self, args=None): 
        """
        param args {Dict}
        param args.exclude_until {Any}: [Optional] Exclude me from the website (for a minimum of 6 months, up to a maximum of 5 years). Note: uplifting this self-exclusion may require contacting the company.
        param args.max_30day_deposit {Any}: [Optional] 7-day limit on deposits.
        param args.max_30day_losses {Any}: [Optional] 30-day limit on losses.
        param args.max_30day_turnover {Any}: [Optional] 30-day turnover limit.
        param args.max_7day_deposit {Any}: [Optional] 7-day limit on deposits.
        param args.max_7day_losses {Any}: [Optional] 7-day limit on losses.
        param args.max_7day_turnover {Any}: [Optional] 7-day turnover limit.
        param args.max_balance {Any}: [Optional] Maximum account cash balance.
        param args.max_deposit {Any}: [Optional] Daily deposit limit.
        param args.max_losses {Any}: [Optional] Daily limit on losses.
        param args.max_open_bets {Any}: [Optional] Maximum number of open positions.
        param args.max_turnover {Any}: [Optional] Daily turnover limit.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.session_duration_limit {Any}: [Optional] Session duration limit, in minutes.
        param args.set_self_exclusion {Number}: Must be `1`
        param args.timeout_until {Any}: [Optional] Exclude me from the website (for up to 6 weeks). Requires time in epoch format. Note: unlike `exclude_until`, this self-exclusion will be lifted automatically at the expiry of the timeout period.
        """

        if args is None:
            args = {} 

        config = {
            'exclude_until': {},
            'max_30day_deposit': {},
            'max_30day_losses': {},
            'max_30day_turnover': {},
            'max_7day_deposit': {},
            'max_7day_losses': {},
            'max_7day_turnover': {},
            'max_balance': {},
            'max_deposit': {},
            'max_losses': {},
            'max_open_bets': {},
            'max_turnover': {},
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'session_duration_limit': {},
            'set_self_exclusion': {
               'required': 1,
               'type': 'numeric'
            },
            'timeout_until': {}
         }

        all_args = {
            'method': 'set_self_exclusion',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def set_settings(self, args=None): 
        """
        param args {Dict}
        param args.account_opening_reason {String}: [Optional] Purpose and reason for requesting the account opening. Only applicable for real money account. Required for clients that have not set it yet. Can only be set once.
        param args.address_city {String}: [Optional] Note: not applicable for virtual account. Required field for real money account.
        param args.address_line_1 {String}: [Optional] Note: not applicable for virtual account. Required field for real money account.
        param args.address_line_2 {Any}: [Optional] Note: not applicable for virtual account. Optional field for real money account.
        param args.address_postcode {String}: [Optional] Note: not applicable for virtual account. Optional field for real money account.
        param args.address_state {String}: [Optional] Note: not applicable for virtual account. Optional field for real money account.
        param args.allow_copiers {Number}: [Optional] Boolean value 1 or 0, indicating permission to allow others to follow your trades. Note: not applicable for Virtual account. Only allow for real money account.
        param args.citizen {Any}: [Optional] Country of legal citizenship, 2-letter country code.
        param args.date_of_birth {String}: [Optional] Date of birth format: yyyy-mm-dd (can only be changed on unauthenticated svg accounts).
        param args.email_consent {Number}: [Optional] Boolean value 1 or 0, indicating permission to use email address for any contact which may include marketing
        param args.feature_flag {Any}: 
        param args.first_name {String}: [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes (can only be changed on unauthenticated svg accounts).
        param args.last_name {String}: [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes (can only be changed on unauthenticated svg accounts).
        param args.non_pep_declaration {Number}: [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates). Effective for real accounts only.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.phone {Any}: [Optional] Note: not applicable for virtual account. Starting with `+` followed by 9-35 digits, hyphens or space.
        param args.place_of_birth {String}: [Optional] Place of birth, 2-letter country code.
        param args.preferred_language {Any}: [Optional] User's preferred language, ISO standard language code
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.request_professional_status {Number}: [Optional] Required when client wants to be treated as professional. Applicable for financial accounts only.
        param args.residence {Any}: [Optional] 2-letter country code. Note: not applicable for real money account. Only allow for Virtual account without residence set.
        param args.salutation {String}: [Optional] Accept any value in enum list (can only be changed on unauthenticated svg accounts).
        param args.secret_answer {String}: [Optional] Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client opens another account.
        param args.secret_question {String}: [Optional] Accept any value in enum list. Required for new account and existing client details will be used if client opens another account.
        param args.set_settings {Number}: Must be `1`
        param args.tax_identification_number {String}: [Optional] Tax identification number. Only applicable for real money account. Required for maltainvest landing company.
        param args.tax_residence {String}: [Optional] Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for maltainvest landing company.
        """

        if args is None:
            args = {} 

        config = {
            'account_opening_reason': {
               'type': 'string'
            },
            'address_city': {
               'type': 'string'
            },
            'address_line_1': {
               'type': 'string'
            },
            'address_line_2': {},
            'address_postcode': {
               'type': 'string'
            },
            'address_state': {
               'type': 'string'
            },
            'allow_copiers': {
               'type': 'numeric'
            },
            'citizen': {},
            'date_of_birth': {
               'type': 'string'
            },
            'email_consent': {
               'type': 'numeric'
            },
            'feature_flag': {
               'wallet': {
                  'type': 'numeric'
               }
            },
            'first_name': {
               'type': 'string'
            },
            'last_name': {
               'type': 'string'
            },
            'non_pep_declaration': {
               'type': 'numeric'
            },
            'passthrough': {},
            'phone': {},
            'place_of_birth': {
               'type': 'string'
            },
            'preferred_language': {},
            'req_id': {
               'type': 'numeric'
            },
            'request_professional_status': {
               'type': 'numeric'
            },
            'residence': {},
            'salutation': {
               'type': 'string'
            },
            'secret_answer': {
               'type': 'string'
            },
            'secret_question': {
               'type': 'string'
            },
            'set_settings': {
               'required': 1,
               'type': 'numeric'
            },
            'tax_identification_number': {
               'type': 'string'
            },
            'tax_residence': {
               'type': 'string'
            }
         }

        all_args = {
            'method': 'set_settings',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def statement(self, args=None): 
        """
        param args {Dict}
        param args.action_type {String}: [Optional] To filter the statement according to the type of transaction.
        param args.date_from {Number}: [Optional] Start date (epoch)
        param args.date_to {Number}: [Optional] End date (epoch)
        param args.description {Number}: [Optional] If set to 1, will return full contracts description.
        param args.limit {Number}: [Optional] Maximum number of transactions to receive.
        param args.offset {Number}: [Optional] Number of transactions to skip.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.statement {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'action_type': {
               'type': 'string'
            },
            'date_from': {
               'type': 'numeric'
            },
            'date_to': {
               'type': 'numeric'
            },
            'description': {
               'type': 'numeric'
            },
            'limit': {
               'type': 'numeric'
            },
            'offset': {
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'statement': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'statement',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def states_list(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.states_list {String}: Client's 2-letter country code (obtained from `residence_list` call)
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'states_list': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'states_list',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def ticks(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] If set to 1, will send updates whenever a new tick is received.
        param args.ticks {Any}: The short symbol name or array of symbols (obtained from `active_symbols` call).
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            },
            'ticks': {
               'required': 1
            }
         }

        all_args = {
            'method': 'ticks',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def ticks_history(self, args=None): 
        """
        param args {Dict}
        param args.adjust_start_time {Number}: [Optional] 1 - if the market is closed at the end time, or license limit is before end time, adjust interval backwards to compensate.
        param args.count {Number}: [Optional] An upper limit on ticks to receive.
        param args.end {String}: Epoch value representing the latest boundary of the returned ticks. If `latest` is specified, this will be the latest available timestamp.
        param args.granularity {Number}: [Optional] Only applicable for style: `candles`. Candle time-dimension width setting. (default: `60`).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.start {Number}: [Optional] Epoch value representing the earliest boundary of the returned ticks. 
- For `"style": "ticks"`: this will default to 1 day ago.
- For `"style": "candles"`: it will default to 1 day ago if count or granularity is undefined.
        param args.style {String}: [Optional] The tick-output style.
        param args.subscribe {Number}: [Optional] 1 - to send updates whenever a new tick is received.
        param args.ticks_history {String}: Short symbol name (obtained from the `active_symbols` call).
        """

        if args is None:
            args = {} 

        config = {
            'adjust_start_time': {
               'type': 'numeric'
            },
            'count': {
               'type': 'numeric'
            },
            'end': {
               'required': 1,
               'type': 'string'
            },
            'granularity': {
               'type': 'numeric'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'start': {
               'type': 'numeric'
            },
            'style': {
               'type': 'string'
            },
            'subscribe': {
               'type': 'numeric'
            },
            'ticks_history': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'ticks_history',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def time(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.time {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'time': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'time',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def tnc_approval(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.tnc_approval {Number}: Must be `1`
        param args.ukgc_funds_protection {Number}: [Optional] For `ASK_UK_FUNDS_PROTECTION` in `cashier`.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'tnc_approval': {
               'required': 1,
               'type': 'numeric'
            },
            'ukgc_funds_protection': {
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'tnc_approval',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def topup_virtual(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.topup_virtual {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'topup_virtual': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'topup_virtual',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_durations(self, args=None): 
        """
        param args {Dict}
        param args.landing_company {String}: [Optional] If specified, will return only the underlyings for the specified landing company.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_durations {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'landing_company': {
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'trading_durations': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_durations',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_accounts(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: Trading platform name
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_platform_accounts {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'trading_platform_accounts': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_platform_accounts',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_deposit(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: Amount to deposit (in the currency of from_wallet).
        param args.from_account {String}: Wallet account to transfer money from.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: Name of trading platform.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.to_account {String}: Trading account login to deposit money to.
        param args.trading_platform_deposit {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'type': 'numeric'
            },
            'from_account': {
               'type': 'string'
            },
            'passthrough': {},
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'to_account': {
               'required': 1,
               'type': 'string'
            },
            'trading_platform_deposit': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_platform_deposit',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_investor_password_change(self, args=None): 
        """
        param args {Dict}
        param args.account_id {String}: Trading account ID.
        param args.new_password {String}: New investor password. Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address.
        param args.old_password {String}: Old investor password for validation (non-empty string, accepts any printable ASCII character)
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: Name of trading platform.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_platform_investor_password_change {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'account_id': {
               'required': 1,
               'type': 'string'
            },
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'old_password': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'trading_platform_investor_password_change': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_platform_investor_password_change',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_investor_password_reset(self, args=None): 
        """
        param args {Dict}
        param args.account_id {String}: Trading account ID.
        param args.new_password {String}: New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: Name of trading platform.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_platform_investor_password_reset {Number}: Must be `1`
        param args.verification_code {String}: Email verification code (received from a `verify_email` call, which must be done first)
        """

        if args is None:
            args = {} 

        config = {
            'account_id': {
               'required': 1,
               'type': 'string'
            },
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'trading_platform_investor_password_reset': {
               'required': 1,
               'type': 'numeric'
            },
            'verification_code': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'trading_platform_investor_password_reset',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_new_account(self, args=None): 
        """
        param args {Dict}
        param args.account_type {String}: Account type.
        param args.currency {String}: [Optional] Trading account currency, the default value will be the qualified account currency.
        param args.dry_run {Number}: [Optional] If set to 1, only validation is performed.
        param args.market_type {String}: Market type
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.password {String}: The master password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address). This field is required.
        param args.platform {String}: Name of trading platform.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.sub_account_type {String}: [Optional] Sub account type.
        param args.trading_platform_new_account {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'account_type': {
               'required': 1,
               'type': 'string'
            },
            'currency': {
               'type': 'string'
            },
            'dry_run': {
               'type': 'numeric'
            },
            'market_type': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'password': {
               'required': 1,
               'type': 'string'
            },
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'sub_account_type': {
               'type': 'string'
            },
            'trading_platform_new_account': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_platform_new_account',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_password_change(self, args=None): 
        """
        param args {Dict}
        param args.new_password {String}: New trading password. Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address.
        param args.old_password {String}: Old password for validation. Must be empty if a password has not been set yet.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: Name of trading platform.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_platform_password_change {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'old_password': {
               'type': 'string'
            },
            'passthrough': {},
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'trading_platform_password_change': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_platform_password_change',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_password_reset(self, args=None): 
        """
        param args {Dict}
        param args.new_password {String}: New password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: Name of trading platform.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_platform_password_reset {Number}: Must be `1`
        param args.verification_code {String}: Email verification code (received from a `verify_email` call, which must be done first)
        """

        if args is None:
            args = {} 

        config = {
            'new_password': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'trading_platform_password_reset': {
               'required': 1,
               'type': 'numeric'
            },
            'verification_code': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'trading_platform_password_reset',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_platform_withdrawal(self, args=None): 
        """
        param args {Dict}
        param args.amount {Number}: Amount to withdraw (in the currency of the Trading account).
        param args.from_account {String}: Trading account login to withdraw money from.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: Name of trading platform.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.to_account {String}: Wallet account loginid to transfer money to.
        param args.trading_platform_withdrawal {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'amount': {
               'required': 1,
               'type': 'numeric'
            },
            'from_account': {
               'required': 1,
               'type': 'string'
            },
            'passthrough': {},
            'platform': {
               'required': 1,
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'to_account': {
               'required': 1,
               'type': 'string'
            },
            'trading_platform_withdrawal': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_platform_withdrawal',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_servers(self, args=None): 
        """
        param args {Dict}
        param args.account_type {String}: [Optional] Trading account type.
        param args.environment {String}: [Optional] Pass the environment (installation) instance. Currently, there are one demo and two real environments. Defaults to 'all'.
        param args.market_type {String}: [Optional] Market type.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.platform {String}: [Optional] Pass the trading platform name, default to mt5
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_servers {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'account_type': {
               'type': 'string'
            },
            'environment': {
               'type': 'string'
            },
            'market_type': {
               'type': 'string'
            },
            'passthrough': {},
            'platform': {
               'type': 'string'
            },
            'req_id': {
               'type': 'numeric'
            },
            'trading_servers': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'trading_servers',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def trading_times(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.trading_times {String}: Date to receive market opening times for. (`yyyy-mm-dd` format. `today` can also be specified).
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'trading_times': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'trading_times',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def transaction(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: If set to 1, will send updates whenever there is an update to transactions. If not to 1 then it will not return any records.
        param args.transaction {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'required': 1,
               'type': 'numeric'
            },
            'transaction': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'transaction',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def transfer_between_accounts(self, args=None): 
        """
        param args {Dict}
        param args.account_from {String}: [Optional] The loginid of the account to transfer funds from.
        param args.account_to {String}: [Optional] The loginid of the account to transfer funds to.
        param args.accounts {String}: [Optional] To control the list of accounts returned when `account_from` or `account_to` is not provided. `brief` (default value) means that accounts with `mt5` account_type will be excluded; it will run faster. `all` means that all accounts with any account_type (including `mt5`) will be returned.
        param args.amount {Number}: [Optional] The amount to transfer.
        param args.currency {String}: [Optional] Currency code.
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.transfer_between_accounts {Number}: If `account_from` or `account_to` is not provided, it just returns the available accounts.
        """

        if args is None:
            args = {} 

        config = {
            'account_from': {
               'type': 'string'
            },
            'account_to': {
               'type': 'string'
            },
            'accounts': {
               'type': 'string'
            },
            'amount': {
               'type': 'numeric'
            },
            'currency': {
               'type': 'string'
            },
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'transfer_between_accounts': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'transfer_between_accounts',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def verify_email(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.type {String}: Purpose of the email verification call.
        param args.url_parameters {Any}: 
        param args.verify_email {String}: Email address to be verified.
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'type': {
               'required': 1,
               'type': 'string'
            },
            'url_parameters': {
               'affiliate_token': {
                  'type': 'string'
               },
               'date_first_contact': {
                  'type': 'string'
               },
               'gclid_url': {
                  'type': 'string'
               },
               'pa_amount': {
                  'type': 'numeric'
               },
               'pa_currency': {
                  'type': 'string'
               },
               'pa_loginid': {
                  'type': 'string'
               },
               'pa_remarks': {
                  'type': 'string'
               },
               'redirect_to': {
                  'type': 'numeric'
               },
               'signup_device': {
                  'type': 'string'
               },
               'utm_ad_id': {},
               'utm_adgroup_id': {},
               'utm_adrollclk_id': {},
               'utm_campaign': {},
               'utm_campaign_id': {},
               'utm_content': {},
               'utm_fbcl_id': {},
               'utm_gl_client_id': {},
               'utm_medium': {},
               'utm_msclk_id': {},
               'utm_source': {},
               'utm_term': {}
            },
            'verify_email': {
               'required': 1,
               'type': 'string'
            }
         }

        all_args = {
            'method': 'verify_email',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def website_status(self, args=None): 
        """
        param args {Dict}
        param args.passthrough {Any}: [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
        param args.req_id {Number}: [Optional] Used to map request to response.
        param args.subscribe {Number}: [Optional] `1` to stream the server/website status updates.
        param args.website_status {Number}: Must be `1`
        """

        if args is None:
            args = {} 

        config = {
            'passthrough': {},
            'req_id': {
               'type': 'numeric'
            },
            'subscribe': {
               'type': 'numeric'
            },
            'website_status': {
               'required': 1,
               'type': 'numeric'
            }
         }

        all_args = {
            'method': 'website_status',
            'needsMethodArg': '1',
            'args': args,
            'config': config,
        }

        return await self.process_request(all_args)

    async def process_request(self, all_args):
        """
        Process request
        """

        config = all_args['config']
        parsed_args = parse_args(all_args)
        error = validate_args(config=config, args=parsed_args)
        if error:
            raise ValueError(error)
        return await self.send(parsed_args)


def parse_args(all_args):
    """
    Parse request args
    """

    parsed_args = all_args['args']
    method = all_args['method']
    
    if all_args['needsMethodArg'] and not(isinstance(parsed_args, dict)):
        parsed_args = {method: parsed_args}

    parsed_args[method] = parsed_args.get(method, 1)
    
    config = all_args['config']
    for param in parsed_args:
        value = parsed_args[param]
        if not (param in config):
            return

        ptype = config[param].get('type')
        if ptype and ptype == 'string':
            parsed_args[param] = f'{value}'
        elif ptype and (ptype == 'numeric' or ptype == 'boolean'):
            parsed_args[param] = int(float(value))
            
    return parsed_args


type_checkers = {
    'dict': lambda value: isinstance(value, dict),
    'numeric': lambda value: isinstance(value, Number),
    'string': lambda value: isinstance(value, str),
    'boolean': lambda value: value in [True, False, 0, 1]
}


def validate_args(config, args):
    """
    Validate request args
    """

    if not isinstance(args, dict):
        return f"Requires an dict but a {type(args)} is passed."

    error_messages = []
    missing = [k for k in config.keys() if (config.get(k) or {}).get('required') and not (k in args)]
    if len(missing):
        error_messages.append(f'Required parameters missing: {", ".join(missing)}')

    for param in args.keys():
        value = args[param]
        if param not in config:
            continue
        expected_type = config[param].get('type')

        if not expected_type:
            continue

        checker = type_checkers.get(expected_type)
        if not checker or not checker(value):
            error_messages.append(f'{expected_type} value expected but found {type(value)}: {param}')

    return ' - '.join(error_messages) if len(error_messages) else ''
